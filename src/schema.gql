# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  name: String
  id: Float!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Category {
  name: String!
  id: Float!
}

type Product {
  id: Float
  category: String!
  imageUrl: String!
  price: Float!
  title: String!
}

type Cart {
  cartId: Float
}

type Item {
  quantity: Float
  cartId: Float!
  productId: Float!
}

type SessionResponse {
  url: String!
}

type Query {
  users(distinct: [UserScalarFieldEnum!], where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Float, skip: Float): [User!]!
  user(where: UserWhereUniqueInput!): User!
  categories(distinct: [CategoryScalarFieldEnum!], where: CategoryWhereInput, orderBy: [CategoryOrderByWithRelationInput!], cursor: CategoryWhereUniqueInput, take: Float, skip: Float): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category!
  products(distinct: [ProductScalarFieldEnum!], where: ProductWhereInput, orderBy: [ProductOrderByWithRelationInput!], cursor: ProductWhereUniqueInput, take: Float, skip: Float): [Product!]!
  product(where: ProductWhereUniqueInput!): Product!
}

enum UserScalarFieldEnum {
  id
  createdAt
  updatedAt
  email
  name
  hashPassword
}

input UserWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  email: StringFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input IntFilter {
  equals: Float
  lt: Float
  lte: Float
  gt: Float
  gte: Float
}

input DateTimeFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

input StringFilter {
  mode: QueryMode
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
}

enum QueryMode {
  default
  insensitive
}

input UserOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
}

enum SortOrder {
  asc
  desc
}

input UserWhereUniqueInput {
  id: Float!
}

enum CategoryScalarFieldEnum {
  id
  name
}

input CategoryWhereInput {
  id: IntFilter
  name: StringFilter
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
}

input CategoryWhereUniqueInput {
  id: Float!
}

enum ProductScalarFieldEnum {
  id
  category
  imageUrl
  price
  title
}

input ProductWhereInput {
  id: IntFilter
  category: StringFilter
  imageUrl: StringFilter
  price: FloatFilter
  title: StringFilter
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input FloatFilter {
  equals: Float
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: Float
}

input ProductOrderByWithRelationInput {
  id: SortOrder
  category: SortOrder
  imageUrl: SortOrder
  price: SortOrder
  title: SortOrder
}

input ProductWhereUniqueInput {
  id: Float!
}

type Mutation {
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(where: UserWhereUniqueInput!): User!
  signUp(signUpData: SignUpDto!): User!
  logIn(logInData: LogInDto!): User!
  logOut: String!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(where: CategoryWhereUniqueInput!): Category!
  createProduct(createProductInput: CreateProductInput!): Product!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  removeProduct(where: ProductWhereUniqueInput!): Product!
  createCart(createCartInput: CreateCartInput!): Cart!
  updateCart(updateCartInput: UpdateCartInput!): Cart!
  createItem(createItemInput: CreateItemInput!): Item!
  updateItem(updateItemInput: UpdateItemInput!): Item!
  createPaymentSession(items: [CreatePaymentInput!]!): SessionResponse!
}

input UpdateUserInput {
  bio: String
  email: String
  fullname: String
  image: String
}

input SignUpDto {
  email: String!
  password: String!
  name: String
}

input LogInDto {
  email: String!
  password: String!
}

input CreateCategoryInput {
  name: String!
}

input UpdateCategoryInput {
  name: String
  id: Float!
}

input CreateProductInput {
  category: String!
  imageUrl: String!
  price: Float!
  title: String!
}

input UpdateProductInput {
  category: String
  imageUrl: String
  price: Float
  title: String
  id: Float!
}

input CreateCartInput {
  cartId: Float
}

input UpdateCartInput {
  cartId: Float!
}

input CreateItemInput {
  cartId: Float!
  productId: Float!
}

input UpdateItemInput {
  cartId: Float!
  productId: Float
}

input CreatePaymentInput {
  productId: Float!
  quantity: Float!
}